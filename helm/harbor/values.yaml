harbor: 
  expose:
    type: clusterIP
    tls:
      enabled: false
    nodePort:
      name: harbor
      ports:
        http:
          # The service port Harbor listens on when serving HTTP
          port: 80
          # The node port Harbor listens on when serving HTTP
          nodePort: 30002
        https:
          # The service port Harbor listens on when serving HTTPS
          port: 443
          # The node port Harbor listens on when serving HTTPS
          nodePort: 30003
      # Annotations on the nodePort service
      annotations: {}
      # nodePort-specific labels
      labels: {}

  # The external URL for Harbor core service. It is used to
  # 1) populate the docker/helm commands showed on portal
  # 2) populate the token service URL returned to docker client
  #
  # Format: protocol://domain[:port]. Usually:
  # 1) if "expose.type" is "ingress", the "domain" should be
  # the value of "expose.ingress.hosts.core"
  # 2) if "expose.type" is "clusterIP", the "domain" should be
  # the value of "expose.clusterIP.name"
  # 3) if "expose.type" is "nodePort", the "domain" should be
  # the IP address of k8s node
  #
  # If Harbor is deployed behind the proxy, set it as the URL of proxy
  externalURL: https://harbor.codegrowers.local-k8s.tech

  # The persistence is enabled by default and a default StorageClass
  # is needed in the k8s cluster to provision volumes dynamically.
  # Specify another StorageClass in the "storageClass" or set "existingClaim"
  # if you already have existing persistent volumes to use
  #
  # For storing images and charts, you can also use "azure", "gcs", "s3",
  # "swift" or "oss". Set it in the "imageChartStorage" section
  persistence:
    enabled: true
    resourcePolicy: ""
    persistentVolumeClaim:
      registry:
        storageClass: "freenas-iscsi-csi"
        accessMode: ReadWriteOnce
        size: 15Gi
        annotations: {}
      jobservice:
        jobLog:
          storageClass: "freenas-iscsi-csi"
          accessMode: ReadWriteOnce
          size: 4Gi
          annotations: {}
      database:
        storageClass: "freenas-iscsi-csi"
        accessMode: ReadWriteOnce
        size: 4Gi
        annotations: {}
      redis:
        storageClass: "freenas-iscsi-csi"
        accessMode: ReadWriteOnce
        size: 4Gi
        annotations: {}
      trivy:
        existingClaim: ""
        storageClass: "freenas-iscsi-csi"
        subPath: ""
        accessMode: ReadWriteOnce
        size: 5Gi
        annotations: {}
    imageChartStorage:
      disableredirect: false
      type: filesystem
      filesystem:
        rootdirectory: /storage
        #maxthreads: 100

  harborAdminPassword: "Harbor12345"

  internalTLS:
    enabled: false
    strong_ssl_ciphers: false

  ipFamily:
    ipv6:
      enabled: true
    ipv4:
      enabled: true

  imagePullPolicy: IfNotPresent

  # Use this set to assign a list of default pullSecrets
  imagePullSecrets:
  #  - name: docker-registry-secret
  #  - name: internal-registry-secret

  # The update strategy for deployments with persistent volumes(jobservice, registry): "RollingUpdate" or "Recreate"
  # Set it as "Recreate" when "RWM" for volumes isn't supported
  updateStrategy:
    type: RollingUpdate

  # debug, info, warning, error or fatal
  logLevel: info

  # The name of the secret which contains key named "ca.crt". Setting this enables the
  # download link on portal to download the CA certificate when the certificate isn't
  # generated automatically
  caSecretName: ""

  # The secret key used for encryption. Must be a string of 16 chars.
  secretKey: ""
  # If using existingSecretSecretKey, the key must be secretKey
  existingSecretSecretKey: ""

  # The proxy settings for updating trivy vulnerabilities from the Internet and replicating
  # artifacts from/to the registries that cannot be reached directly
  proxy:
    httpProxy:
    httpsProxy:
    noProxy: 127.0.0.1,localhost,.local,.internal
    components:
      - core
      - jobservice
      - trivy

  # Run the migration job via helm hook
  enableMigrateHelmHook: false
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

  trivy:
    # enabled the flag to enable Trivy scanner
    enabled: false
